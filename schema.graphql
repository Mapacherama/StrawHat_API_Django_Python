schema {
  query: Query
  mutation: Mutation
}

type OnePieceCharacter {
  id: ID!
  name: String!
  bloodtype: String!
  occupation: String!
  nickname: String!
  isalive: Boolean!
  ispartoffleet: Boolean!
  bounty: Int!
  age: Int!
  height: Int!
  Origin: SingleOriginResult
}

type Origin {
  id: ID!
  name: String!
  isKingdom: Boolean!
}

type Crew {
  id: ID!
  name: String!
  oceanOfOrigin: String!
  captain: String!
  mainShip: String!
  totalBounty: Int!
}

# For mutation related stuff.

#OnePieceCharacter

type OnePieceCharacterResult { #Better naming convention (?)
  success: Boolean!
  errors: [String]
  character: OnePieceCharacter
}

type OnePieceCharactersResult {
  success: Boolean!
  errors: [String]
  onepiececharacters: [OnePieceCharacter]
}

#Origin

type SingleOriginResult {
  success: Boolean!
  errors: [String]
  origin: Origin
}

type MultipleOriginsResult {
  success: Boolean!
  errors: [String]
  origin: [Origin]
}


type Query {
  listCharacters: OnePieceCharactersResult!
  getCharacter(id: ID!): OnePieceCharacterResult!
  listOrigins: MultipleOriginsResult!
}

type Mutation {
  createOnePieceCharacter(
    name: String!
    crew: String!
    devilfruit: String!
    residence: String!
    bounty: Int!
  ): OnePieceCharacterResult!

  updateOnePieceCharacter(
    id: ID!,
    name: String!
    crew: String!
    devilfruit: String!
    Residence: String!
    bounty: Int!
  ): SingleOriginResult!
  deleteOnePieceCharacter(id: ID): SingleOriginResult!

    createCountryOfOrigin(
    name: String!
    crew: String!
    devilfruit: String!
    residence: String!
    bounty: Int!
  ): SingleOriginResult!

  updateCountryOfOrigin(
    id: ID!,
    name: String!
    crew: String!
    devilfruit: String!
    Residence: String!
    bounty: Int!
  ): SingleOriginResult!
  deleteCountryOfOrigin(id: ID): SingleOriginResult!
}
